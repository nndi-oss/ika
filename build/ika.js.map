{"mappings":"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","sources":["src/ika.dom.ts","src/types.ts","src/ika.ts"],"sourcesContent":["import './types'\nimport Ika from './ika'\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    // Add ika-disable to disable the input from being added to the page\n    if (document.getElementsByClassName('ika-disable').length > 0) {\n        return;\n    }\n    const ikaInstance = new Ika({});\n\n    function __ikaSetInputValue(el, fakerSpecOrFn, fakerObj) {\n        let value = fakerSpecOrFn;\n        var elType = el.getAttribute(\"type\");\n        if (elType == \"radio\" || elType == \"checkbox\") {\n            if (value && (value == \"0\" || value.toLowerCase() == \"n\")) {\n                el.removeAttribute(\"checked\");\n            }\n            if (value && (value == \"1\" || value.toLowerCase() == \"y\")) {\n                el.setAttribute(\"checked\", \"checked\");\n            }\n        }\n\n        if (typeof (value) === 'function') {\n            el.setAttribute(\"value\", value(el) || '');\n        } else {\n            if (value.startsWith(\"faker.\")) {\n                let withoutFaker = typeof (value) === 'string' ? value.replace(\"faker.\", \"\") : '',\n                    fakedValue = fakerObj.helpers.fake(`{{${withoutFaker}}}`);\n                el.setAttribute(\"value\", fakedValue);\n            } else if (value) {\n                el.setAttribute(\"value\", value);\n            }\n        }\n\n        // Set the selected element of a <select> element \n        // based on either the <option value> or the option's inner text\n        if (el.nodeName === \"SELECT\" && el.type === \"select-one\") {\n            let selectedIndex = -1;\n            for (var i = 0; i < el.options.length; i++) {\n                if (el.options[i].value == value || el.options[i].innerText.toLowerCase().replace('\\s', '') === value.toLowerCase().replace('\\s', '')) {\n                    el.selectedIndex = i;\n                    selectedIndex = i;\n                    break;\n                }\n            }\n\n            if (selectedIndex === -1) {\n                try {\n                    let parsedIndex = parseInt(value.trim(), 10) \n                    el.selectedIndex = parsedIndex - 1\n                } catch(e) {\n                    // swallow the error, since this was a fallback anyways\n                    console.error(`could not set selected value for input ${el.name}, failed to parse ${value} as option value or text or actual index`)\n                }\n            }\n        }\n    }\n\n    function setDataOnInputsOnTarget(event: Event, targetElement: HTMLFormElement | Document, taggedInputText: string, fakerObj: any) {\n        var inputMapping = ikaInstance.generateMappings(targetElement);\n        var parsed = ikaInstance.parseMapping(taggedInputText, inputMapping);\n\n        if (parsed == null) {\n            return false;\n        }\n        for (var [el, value] of parsed) {\n            __ikaSetInputValue(el, value, fakerObj);\n        }\n\n        return event.preventDefault();\n    }\n\n    function __ikahandleSubmit(evt: Event) {\n        const configuredFaker = window.ikaConfig.faker;\n        var rawText = ikaTxt.value;\n        if (!window.ikaConfig) {\n            console.error(\"ika.js: cannot process event when ikaConfig is not defined\")\n            return false;\n        }\n\n        if (!window.ikaConfig.forms) {\n            console.error(\"ika.js: cannot process event when no form is defined in window.ikaConfig['forms']\")\n            return false;\n        }\n\n        const catchAllFormExists: boolean = window.ikaConfig.forms['*'] || false,\n            catchAllFormDef = catchAllFormExists ? Object.assign({}, window.ikaConfig.forms['*']) : {};\n\n        if (!catchAllFormExists) {\n            console.log('ika.js: catch-all form * not defined, we recommend defining a catch all form')\n        }\n\n        // Go through the document checking if the current page/document has one of the forms\n        // defined in ikaConfig.forms - we have to consider that we may have multiple forms too\n        let formsOnPage: { [key: string]: HTMLFormElement | Document } = {}\n        for (var [formName, ikaFormOptions] of Object.entries(window.ikaConfig.forms)) {\n            if (formName === '*') {\n                // skip the catch all first - only run it when no pages are defined on the page\n                continue;\n            }\n            let el = document.querySelector(formName) as HTMLFormElement | null;\n            if (el) {\n                formsOnPage[formName] = el\n            }\n        }\n\n        let noConfiguredFormsFoundOnPage = Object.entries(formsOnPage).length < 1;\n\n        if (noConfiguredFormsFoundOnPage) {\n            if (catchAllFormExists) {\n                // Run the catch-all form logic\n                for (var [nameOrTag, fakerSpecOrFn] of Object.entries(catchAllFormDef)) {\n                    let el = document.querySelector(`[name=${nameOrTag}]`);\n                    if (!el) {\n                        console.error(\"ika.js: failed to generate faker value - could not find element with name\", nameOrTag)\n                        return;\n                    }\n                    __ikaSetInputValue(el, fakerSpecOrFn, configuredFaker);\n                }\n            } else {\n                console.error(\"ika.js: Cannot run ika when no forms on page and catch-all form '*' is not defined\")\n                return false;\n            }\n        }\n\n        const ikaInputTextAreaIsEmpty = rawText.length < 1;\n        // When the input is empty, we use values from the faker library directly if \n        // they are defined in teh configuration\n        if (ikaInputTextAreaIsEmpty) {\n            for (var [formName, formEl] of Object.entries(formsOnPage)) {\n                console.debug('ika.js: processing ika for ', formName)\n                // TODO: add elements from the catch-all form to the form here\n                for (var [nameOrTag, fakerSpecOrFn] of Object.entries(window.ikaConfig.forms[formName])) {\n                    let el = formEl.querySelector(`[name=${nameOrTag}]`);\n                    if (!el) {\n                        console.error(\"ika.js: failed to generate faker value - could not find element with name\", nameOrTag)\n                        continue;\n                    }\n                    __ikaSetInputValue(el, fakerSpecOrFn, configuredFaker);\n                }\n            }\n            return false;\n        }\n\n        // By default the document element is our default target\n        let ikaTargetElement: HTMLElement | Document = document;\n\n        return setDataOnInputsOnTarget(evt, ikaTargetElement, rawText, configuredFaker);\n    }\n\n    var ikaParentNode: HTMLElement | null = document.getElementById(\"ika-apa\");\n    // If the ika input is not defined, then add it to the document\n    if (!ikaParentNode) {\n        ikaParentNode = document.createElement('div');\n        ikaParentNode.setAttribute('id', 'ika-apa');\n        ikaParentNode.setAttribute('data-generated', 'true');\n        ikaParentNode.style.position = 'absolute';\n        ikaParentNode.style.bottom = '0';\n        ikaParentNode.style.right = '0';\n\n        document.getElementsByTagName('body')[0].appendChild(ikaParentNode)\n\n        function onResize(event) {\n            if (ikaParentNode) {\n                ikaParentNode.style.bottom = '0px';\n                ikaParentNode.style.right = '0px';\n            }\n        }\n\n        window.addEventListener('resize', onResize)\n    }\n\n    if (ikaParentNode) {\n        var wrap = document.createElement(\"div\");\n        wrap.setAttribute(\"id\", \"nndi--ika-control\");\n\n        var ikaTxt = document.createElement(\"textarea\")\n        ikaTxt.setAttribute(\"id\", \"nndi--ika-txt\");\n        ikaTxt.setAttribute(\"placeholder\", \"use tags here or leave empty for auto-fill\")\n        ikaTxt.setAttribute(\"contenteditable\", \"true\");\n        ikaTxt.setAttribute(\"tabindex\", \"1\");\n\n        var ikaBtn = document.createElement(\"button\")\n        ikaBtn.setAttribute(\"id\", \"nndi--ika-btn\");\n        // ikaBtn.innerHTML = \"🪄 Populate (Ctrl + Enter)\";\n        ikaBtn.innerHTML = \"🪄 Fill (Ctrl + Enter)\";\n\n        var poweredBy = document.createElement(\"small\");\n        poweredBy.setAttribute(\"id\", \"nndi--ika-powered\");\n        poweredBy.innerHTML = 'Powered by <a href=\"https://github.com/zikani03/ika\">ika</a>';\n\n        ikaBtn.addEventListener(\"click\", __ikahandleSubmit);\n\n        ikaTxt.addEventListener(\"keypress\", (event: KeyboardEvent) => {\n            if (event.keyCode == 13 && event.ctrlKey) {\n                __ikahandleSubmit(event);\n            }\n        });\n\n        wrap.appendChild(ikaTxt);\n        wrap.appendChild(ikaBtn);\n        wrap.appendChild(poweredBy);\n\n        ikaParentNode.appendChild(wrap);\n    } else {\n        console.error(\"ika: failed to find or create node to mount ika onto. Typically expects a div#ika-apa\");\n    }\n});","export type IkaFakerOptions = {\n    [key: string]: String | ((x: any) => string)\n};\n\nexport type IkaForm = {\n    [key: string]: IkaFakerOptions;\n};\n\n/**\n * IkaConfig is the configuration for the ika \n * project to determine which forms to generate tags\n * or inputs for\n */\nexport type IkaConfig = {\n    faker: any,\n    floatingButton: Boolean,\n    forms: { string: IkaForm }\n}\n\ndeclare global {\n    interface Window {\n        ikaConfig: IkaConfig,\n    }\n}\n","/**\n * Ika provides functionality for mapping tags to Input Elements and parsing\n * tagged text input.\n * \n * @author Zikani Nyirenda Mwase <zikani03@nndi.cloud>\n */\n\nexport default class Ika {\n\n    _config: any | null\n    __tagRegexp: RegExp\n    _inputTagMap: any\n\n    constructor(config = {}) {\n        this._config = Object.assign({}, config);\n        this.__tagRegexp = /(\\w+\\b\\:)/g;\n        this._inputTagMap = new Map<any, any>()\n    }\n\n    /**\n     * Generates mapping of tag to an input element.\n     * \n     * @return WeakMap with mapping of tag to input element \n     */\n    generateMappings(formEl): any {\n        this.generateMappingFromInputs(formEl)\n        this.generateMappingFromSelects(formEl)\n\n        return this._inputTagMap;\n    }\n\n    /**\n     * Generates mapping of tag to an input element.\n     * \n     * @return WeakMap with mapping of tag to input element \n     */\n    generateMappingFromInputs(formEl): any {\n        const inputList: any = formEl.getElementsByTagName(\"input\");\n        let tagName: string | null = null;\n\n        for (var e of inputList) {\n            let inputField: HTMLInputElement = e\n\n            if (inputField.hasAttribute(\"data-ika\")) {\n                tagName = inputField.getAttribute(\"data-ika\");\n            } else {\n                // TODO: for checkboxes, radios and select options use the value as the tagName if possible.\n                tagName = inputField.getAttribute(\"name\");\n            }\n\n            if (this._inputTagMap[tagName!]) {\n                // already exists, skip it?\n                continue;\n            }\n            this._inputTagMap[tagName!] = inputField\n        }\n\n        return this._inputTagMap;\n    }\n\n    /**\n     * Generates mapping of tag to an input element.\n     * \n     * @return WeakMap with mapping of tag to input element \n     */\n    generateMappingFromSelects (formEl): any {\n        const selectsList: any = formEl.getElementsByTagName(\"select\");\n        let tagName: string | null = null;\n\n        for (var e of selectsList) {\n            let selectControl: HTMLSelectElement = e\n\n            if (selectControl.hasAttribute(\"data-ika\")) {\n                tagName = selectControl.getAttribute(\"data-ika\");\n            } else {\n                tagName = selectControl.getAttribute(\"name\");\n            }\n\n            if (this._inputTagMap[tagName!]) {\n                // already exists, skip it?\n                continue;\n            }\n            this._inputTagMap[tagName!] = selectControl\n        }\n\n        return this._inputTagMap;\n    }\n\n    /**\n     * Parses tagged text with the given input mapping\n     * \n     * @param string textInput tagged text input\n     * @param object mapping of tag to input element\n     * @return object with mapping of input to value from the tagged text\n     */\n    parseMapping(textInput: string, mapping: Map<string, HTMLInputElement> | null = null) {\n        if (textInput == null || textInput === '') {\n            return null;\n        }\n\n        if (mapping == null) {\n            // Use Cached input map if the mapping is not provided\n            mapping = this._inputTagMap;\n        }\n\n        let output = new Map()\n\n        const atoms = textInput.split(this.__tagRegexp);\n        var currentTag: string | null = null;\n        var lastElementWasTag = false;\n        let el = null;\n\n        for (var value of atoms) {\n            if (this.__tagRegexp.test(value)) {\n                currentTag = value.trim().replace(\":\", \"\");\n                lastElementWasTag = true;\n                continue;\n            }\n            el = mapping[currentTag!];\n            if (lastElementWasTag && el) {\n                var formattedValue = value.trim()\n                    .replace(/^\\'/gm, \"\")\n                    .replace(/\\'$/gm, \"\")\n                    .replace(/^\\\"/gm, \"\")\n                    .replace(/\\\"$/gm, \"\")\n                    .trim();\n                output.set(el, formattedValue.trim());\n                lastElementWasTag = false;\n            }\n        }\n\n        if (output.size == 0)\n            return null;\n\n        return output;\n    }\n}\n"],"names":[],"version":3,"file":"ika.js.map"}